import java.io.*;
import java.util.*;
 

public class Main {

	  Node head, tail;

    static class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            this.next = null;
        }

    }

    void append(int data) {
        Node new_node = new Node(data);

        if (head == null) {
            head = tail = new_node;
            return;
        }

        tail.next = new_node;
        tail = new_node;
    }

    Node seggregate(Node head) {
      int freq[] = new int[3];
        for (int i = 0; i < freq.length; i++) {
            freq[i] = -1;
        }
        Node cur = head;

        while (cur != null) {
            freq[cur.data]++;
            cur = cur.next;
        }

      //  System.out.println(Arrays.toString(freq));

        //reset the head
        cur = head;

        for (int i = 0; i < freq.length; i++) {
            if (freq[i] == -1) {
                continue;
            }
            while (freq[i] != -1) {
                cur.data = i;
                cur = cur.next;
                freq[i] = freq[i] - 1;
            }
        }
        return head;
    }

    void print(Node head) {
        if (head == null) return;

        Node cur = head;
        while (cur != null) {
            System.out.print(cur.data + " ");
            cur = cur.next;
        }
    }
    
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        Main l1 = new Main();
        for (int i = 0; i < n; i++) {
            l1.append(sc.nextInt());
        }
        Node res = l1.seggregate(l1.head);
        l1.print(res);
    }
}

//T(c) = o(1) and Space o(1)
// Algo
// 1. make a freq array of 3 size so o(1) space
// 2. First traverse the list and store freq
// 3. reset cur pointer again
// 4. run a for loop till array len o(1) time
// 	check if(arr[i] == -1)continue; 
//    else run a while loop till value in freq does not become -1 
// 	and reuse the same list and change it's data.
	
